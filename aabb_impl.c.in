// File created: 2011-08-06 17:57:52

#include "aabb_impl.h"

#include <assert.h>

void mush_aabb_make(mush_aabb* aabb, mushcoords b, mushcoords e) {
	for (unsigned i = 0; i < MUSHSPACE_DIM; ++i)
		assert (b.v[i] <= e.v[i]);

	mush_aabb_make_unsafe(aabb, b, e);
	mush_aabb_finalize(aabb);
}

void mush_aabb_make_unsafe(mush_aabb* aabb, mushcoords b, mushcoords e) {
	*aabb = (mush_aabb){.beg = b, .end = e};
}

void mush_aabb_finalize(mush_aabb* aabb) {
	aabb->size = aabb->end.x - aabb->beg.x + 1;

#if MUSHSPACE_DIM >= 2
	aabb->width = aabb->size;
	aabb->size *= aabb->end.y - aabb->beg.y + 1;
#endif
#if MUSHSPACE_DIM >= 3
	aabb->area  = aabb->size;
	aabb->size *= aabb->end.z - aabb->beg.z + 1;
#endif
}

mushcell mush_aabb_get(const mush_aabb* aabb, mushcoords c) {
	assert (mush_aabb_contains(aabb, c));
	return aabb->data[mush_aabb_get_idx(aabb, c)];
}
bool mush_aabb_contains(const mush_aabb* aabb, mushcoords c) {
	return mushcoords_contains(c, aabb->beg, aabb->end);
}

bool mush_aabb_safe_contains(const mush_aabb* aabb, mushcoords c) {
	for (mushucell i = 0; i < MUSHSPACE_DIM; ++i) {
		if (aabb->beg.v[i] > aabb->end.v[i]) {
			if (!(c.v[i] >= aabb->beg.v[i] || c.v[i] <= aabb->end.v[i]))
				return false;
		} else
			if (!(c.v[i] >= aabb->beg.v[i] && c.v[i] <= aabb->end.v[i]))
				return false;
	}
	return true;
}

size_t mush_aabb_get_idx(const mush_aabb* aabb, mushcoords c) {
	return mush_aabb_get_idx_no_offset(aabb, mushcoords_sub(c, aabb->beg));
}
size_t mush_aabb_get_idx_no_offset(const mush_aabb* aabb, mushcoords c)
{
	size_t i = c.x;
#if MUSHSPACE_DIM >= 2
	i += aabb->width * c.y;
#if MUSHSPACE_DIM >= 3
	i += aabb->area  * c.z;
#endif
#else
	(void)aabb;
#endif
	return i;
}
