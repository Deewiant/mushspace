// File created: 2011-08-07 17:31:12

#include "bakaabb_impl.h"

#include <assert.h>

#include "lib/tommyds/tommyhashdyn.h"

#define mush_bakaabb_hash    MUSHSPACE_CAT(mush_bakaabb,_hash)
#define mush_bakaabb_compare MUSHSPACE_CAT(mush_bakaabb,_compare)

static tommy_hash_t mush_bakaabb_hash(mushcoords c) {
	// MurmurHash3_x86_32
	uint32_t h = 0;

	assert (sizeof(tommy_hash_t) == sizeof h);
	assert (sizeof c % sizeof(tommy_hash_t) == 0);

	const uint8_t *data = (const uint8_t*)&c;
	static const int nblocks = (sizeof c) / 4;

	const uint32_t *blocks = (const uint32_t*)(data + nblocks*4);

	for (int i = -nblocks; i; ++i) {
		uint32_t k = blocks[i];

		k *= 0xcc9e2d51;
		k = k << 15 | k >> (32-15);
		k *= 0x1b873593;

		h ^= k;
		h = h << 13 | h >> (32-13);
		h = h*5 + 0xe6546b64;
	}

	h ^= sizeof c;
	h ^= h >> 16;
	h *= 0x85ebca6b;
	h ^= h >> 13;
	h *= 0xc2b2ae35;
	h ^= h >> 16;

	return h;
}

static int mush_bakaabb_compare(const void* a, const void *b) {
	const mushcoords *m = a, *n = b;

	for (unsigned i = MUSHSPACE_DIM; i--;)
		if (m->v[i] != n->v[i])
			return m->v[i] < n->v[i] ? -1 : 1;
	return 0;
}

void mush_bakaabb_init(mush_bakaabb* bak, mushcoords c) {
	bak->data = malloc(sizeof(tommy_hashdyn));
	tommy_hashdyn_init(bak->data);
	bak->beg = bak->end = c;
}

mushcell mush_bakaabb_get(mush_bakaabb* bak, mushcoords c) {
	const mushcell *p = tommy_hashdyn_search(bak->data, mush_bakaabb_compare,
	                                         &c, mush_bakaabb_hash(c));
	return *p;
}
