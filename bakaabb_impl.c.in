// File created: 2011-08-07 17:31:12

#include "bakaabb_impl.h"

#include <assert.h>
#include <stdint.h>

#include "lib/khash.h"

#define mush_bakaabb_hash MUSHSPACE_CAT(mush_bakaabb,_hash)

static size_t mush_bakaabb_hash(mushcoords);

KHASH_INIT(mushcoords, mushcoords, mushcell, true,
           mush_bakaabb_hash, mushcoords_equal)

void mush_bakaabb_init(mush_bakaabb* bak, mushcoords c) {
	bak->data = kh_init(mushcoords);
	bak->beg = bak->end = c;
}

mushcell mush_bakaabb_get(mush_bakaabb* bak, mushcoords c) {
	khash_t(mushcoords) *hash = bak->data;
	return kh_value(hash, kh_get(mushcoords, hash, c));
}

static size_t mush_bakaabb_hash(mushcoords c) {
#if SIZE_MAX == 0xffffffff
	// MurmurHash3_x86_32
	uint32_t h = 0;

	assert ((sizeof c) % 4 == 0);

	const uint8_t *data = (const uint8_t*)&c;
	static const int nblocks = (sizeof c) / 4;

	const uint32_t *blocks = (const uint32_t*)(data + nblocks*4);

	for (int i = -nblocks; i; ++i) {
		uint32_t k = blocks[i];

		k *= 0xcc9e2d51;
		k = k << 15 | k >> (32-15);
		k *= 0x1b873593;

		h ^= k;
		h = h << 13 | h >> (32-13);
		h = h*5 + 0xe6546b64;
	}

	h ^= sizeof c;
	h ^= h >> 16;
	h *= 0x85ebca6b;
	h ^= h >> 13;
	h *= 0xc2b2ae35;
	h ^= h >> 16;

	return h;
#else
#error No hash function for a size_t of this size!
#endif
}
